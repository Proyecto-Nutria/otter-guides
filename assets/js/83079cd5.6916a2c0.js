(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{115:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return m}));var i=n(0),a=n.n(i);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function b(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=a.a.createContext({}),l=function(e){var t=a.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=l(e.components);return a.a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},u=a.a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,s=b(e,["components","mdxType","originalType","parentName"]),p=l(n),u=i,m=p["".concat(o,".").concat(u)]||p[u]||d[u]||r;return n?a.a.createElement(m,c(c({ref:t},s),{},{components:n})):a.a.createElement(m,c({ref:t},s))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=u;var c={};for(var b in t)hasOwnProperty.call(t,b)&&(c[b]=t[b]);c.originalType=e,c.mdxType="string"==typeof e?e:i,o[1]=c;for(var s=2;s<r;s++)o[s]=n[s];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},119:function(e,t,n){"use strict";n.d(t,"b",(function(){return r})),n.d(t,"a",(function(){return o}));var i=n(16),a=n(120);function r(){const{siteConfig:{baseUrl:e="/",url:t}={}}=Object(i.default)();return{withBaseUrl:(n,i)=>function(e,t,n,{forcePrependBaseUrl:i=!1,absolute:r=!1}={}){if(!n)return n;if(n.startsWith("#"))return n;if(Object(a.b)(n))return n;if(i)return t+n;const o=n.startsWith(t)?n:t+n.replace(/^\//,"");return r?e+o:o}(t,e,n,i)}}function o(e,t={}){const{withBaseUrl:n}=r();return n(e,t)}},120:function(e,t,n){"use strict";function i(e){return!0===/^(\w*:|\/\/)/.test(e)}function a(e){return void 0!==e&&!i(e)}n.d(t,"b",(function(){return i})),n.d(t,"a",(function(){return a}))},91:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return b})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return p}));var i=n(3),a=n(7),r=(n(0),n(115)),o=n(119),c={id:"debug",title:"Debug"},b={unversionedId:"interviewer/debug",id:"interviewer/debug",isDocsHomePage:!1,title:"Debug",description:"cpbooster provides a way for you to run your program using your debugging",source:"@site/docs/interviewer/debug.mdx",slug:"/interviewer/debug",permalink:"/otter-guides/docs/interviewer/debug",editUrl:"https://github.com/proyecto-nutria/otter-guides/docs/interviewer/debug.mdx",version:"current",sidebar:"interviewer",previous:{title:"Test",permalink:"/otter-guides/docs/interviewer/test"},next:{title:"Submit",permalink:"/otter-guides/docs/interviewer/submit"}},s=[{value:"Executable File Details",id:"executable-file-details",children:[]},{value:"Debug With Input File",id:"debug-with-input-file",children:[]},{value:"Debug Without Recompiling",id:"debug-without-recompiling",children:[]},{value:"Debug Tips &amp; Tricks",id:"debug-tips--tricks",children:[{value:"Improve RTE Feedback In C++",id:"improve-rte-feedback-in-c",children:[]},{value:"Print Debug Lines In Red In C++",id:"print-debug-lines-in-red-in-c",children:[]},{value:"Debug Command In Python",id:"debug-command-in-python",children:[]},{value:"Print Anything Like In Python With C++",id:"print-anything-like-in-python-with-c",children:[]}]}],l={toc:s};function p(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(r.b)("wrapper",Object(i.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"cpbooster")," provides a way for you to run your program using your debugging\nflags (",Object(r.b)("a",{href:"/docs/interviewer/configuration#languageslangdebugcommand-string",style:{color:"white"}},Object(r.b)("inlineCode",{parentName:"p"},"languages.<lang>.debugCommand")),").\nYou can pass the ",Object(r.b)("inlineCode",{parentName:"p"},"--debug")," flag (or its alias which is just ",Object(r.b)("inlineCode",{parentName:"p"},"-d"),") to the ",Object(r.b)("inlineCode",{parentName:"p"},"test")," command for this."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-txt"},"cpb t <filePath> -d\n")),Object(r.b)("p",null,"By default, this command will request keyboard input, just like if you executed ",Object(r.b)("inlineCode",{parentName:"p"},"./program.exe")," or ",Object(r.b)("inlineCode",{parentName:"p"},"python program.py"),".\nIf you wish to use a file as input See ",Object(r.b)("a",{parentName:"p",href:"#debug-with-input-file"},"Debug With Input File"),"."),Object(r.b)("h4",{id:"demo"},"Demo"),Object(r.b)("div",{className:"text--center"},Object(r.b)("img",{alt:"test",src:Object(o.a)("/img/demos/debug_keyboard.gif")})),Object(r.b)("br",null),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",{parentName:"div",className:"admonition-heading"},Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",{parentName:"h5",className:"admonition-icon"},Object(r.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(r.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"NOTES")),Object(r.b)("div",{parentName:"div",className:"admonition-content"},Object(r.b)("ol",{parentName:"div"},Object(r.b)("li",{parentName:"ol"},"This command will ",Object(r.b)("strong",{parentName:"li"},"automatically compile")," your program everytime you run it.\nSee ",Object(r.b)("a",{parentName:"li",href:"#debug-without-recompiling"},"Debug Without Recompiling")," for details on how to avoid recompiling your program each time."),Object(r.b)("li",{parentName:"ol"},Object(r.b)("inlineCode",{parentName:"li"},"cpbooster")," does not print your debugging lines in red, this should be your code's behavior when running in debug mode.\nSee ",Object(r.b)("a",{parentName:"li",href:"#debug-tips--tricks"},"Debug Tips & Tricks"),".")))),Object(r.b)("h3",{id:"executable-file-details"},"Executable File Details"),Object(r.b)("p",null,"The executable file will be located in your current directory and its name will\nbe the concatenation of the source file name and the word ",Object(r.b)("strong",{parentName:"p"},'"debug"')," followed by the extension\nwhich will be ",Object(r.b)("inlineCode",{parentName:"p"},".exe"),". For example, if your source file name is ",Object(r.b)("inlineCode",{parentName:"p"},"ProblemA.cpp")," then the executable file\nname will be ",Object(r.b)("inlineCode",{parentName:"p"},"ProblemAdebug.exe"),". This is because ",Object(r.b)("inlineCode",{parentName:"p"},"cpbooster")," uses filenames to associate everything\n(See ",Object(r.b)("a",{parentName:"p",href:"/docs/interviewer/clone#file-structure"},Object(r.b)("strong",{parentName:"a"},"File Structure"))," for better understanding).\nIf you wish to save the executable file with a different name,\nyou can specify it in your ",Object(r.b)("a",{href:"/docs/interviewer/configuration#languageslangdebugcommand-string",style:{color:"white"}},Object(r.b)("inlineCode",{parentName:"p"},"languages.<lang>.debugCommand")),"."),Object(r.b)("h2",{id:"debug-with-input-file"},"Debug With Input File"),Object(r.b)("p",null,"You can specify a test case to run in debugging mode using the ",Object(r.b)("inlineCode",{parentName:"p"},"--testId")," flag or its alias ",Object(r.b)("inlineCode",{parentName:"p"},"-t"),"."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-txt"},"cpb t <filePath> -t <number> -d\n")),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",{parentName:"div",className:"admonition-heading"},Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",{parentName:"h5",className:"admonition-icon"},Object(r.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(r.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),Object(r.b)("div",{parentName:"div",className:"admonition-content"},Object(r.b)("p",{parentName:"div"},"The only difference between the command used to ",Object(r.b)("a",{parentName:"p",href:"/docs/interviewer/test#test-with-a-single-test-case"},"Test With A Single Test Case")," and this one, is the\n",Object(r.b)("inlineCode",{parentName:"p"},"-d")," flag at the end, which tells",Object(r.b)("inlineCode",{parentName:"p"}," cpbooster")," to run in ",Object(r.b)("strong",{parentName:"p"},"debug")," mode."))),Object(r.b)("h4",{id:"demo-1"},"Demo"),Object(r.b)("div",{className:"text--center"},Object(r.b)("img",{alt:"test",src:Object(o.a)("/img/demos/debug_file.gif")})),Object(r.b)("h2",{id:"debug-without-recompiling"},"Debug Without Recompiling"),Object(r.b)("p",null,"You can tell ",Object(r.b)("inlineCode",{parentName:"p"},"cpbooster")," to run in ",Object(r.b)("strong",{parentName:"p"},"debug")," mode using the last compiled version of your program\nby passing the flag ",Object(r.b)("inlineCode",{parentName:"p"},"--noCompile")," or its alias  ",Object(r.b)("inlineCode",{parentName:"p"},"--nc"),"."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-txt"},"cpb t <filePath> -d --nc\n")),Object(r.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(r.b)("div",{parentName:"div",className:"admonition-heading"},Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",{parentName:"h5",className:"admonition-icon"},Object(r.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},Object(r.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),Object(r.b)("div",{parentName:"div",className:"admonition-content"},Object(r.b)("p",{parentName:"div"},"By using this flag, ",Object(r.b)("inlineCode",{parentName:"p"},"cpbooster")," will assume that there is a corresponding executable file\nfor your program. Remember that the name of the executable file must be the same as the\nsource file plus the word ",Object(r.b)("strong",{parentName:"p"},'"debug"'),", followed by the extension which must be ",Object(r.b)("inlineCode",{parentName:"p"},".exe"),". Unless you specified otherwise\nin ",Object(r.b)("a",{href:"/docs/interviewer/configuration#languageslangdebugcommand-string",style:{color:"white"}},Object(r.b)("inlineCode",{parentName:"p"},"languages.<lang>.debugCommand")),"."))),Object(r.b)("h2",{id:"debug-tips--tricks"},"Debug Tips & Tricks"),Object(r.b)("h3",{id:"improve-rte-feedback-in-c"},"Improve RTE Feedback In C++"),Object(r.b)("p",null,"You can use the following ",Object(r.b)("a",{parentName:"p",href:"/docs/interviewer/configuration#languageslangdebugcommand-string"},"debug command")," to get much better feedback in case of runtime errors."),Object(r.b)("h5",{id:"cpbooster-configjson"},Object(r.b)("inlineCode",{parentName:"h5"},"cpbooster-config.json")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-json"},'{\n  "debugCommand": "g++ -std=gnu++17 -O3 -DDEBUG -g -fsanitize=signed-integer-overflow -fsanitize=bounds-strict -fsanitize=address -fsanitize=integer-divide-by-zero -fsanitize=float-divide-by-zero -fsanitize=pointer-overflow -fsanitize=shift-exponent -fsplit-stack -Wshadow -Wall -fconcepts"\n}\n')),Object(r.b)("h3",{id:"print-debug-lines-in-red-in-c"},"Print Debug Lines In Red In C++"),Object(r.b)("h5",{id:"cpbooster-configjson-1"},Object(r.b)("inlineCode",{parentName:"h5"},"cpbooster-config.json")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-json"},'{\n  "debugCommand": "g++ -DDEBUG"\n}\n')),Object(r.b)("h5",{id:"programcpp"},Object(r.b)("inlineCode",{parentName:"h5"},"program.cpp")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-cpp"},'#include <bits/stdc++.h>\nusing namespace std;\n\n#define coutc cout << "\\033[48;5;196m\\033[38;5;15m" // red color code\n#define endlc "\\033[0m" << endl; // this resets the coloring\n\nint main() {\n  int a, b;\n  cin >> a >> b;\n#ifdef DEBUG\n  coutc << a << " " << b << endlc;\n#endif\n  cout << a + b << endl;\n  return 0;\n}\n')),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",{parentName:"div",className:"admonition-heading"},Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",{parentName:"h5",className:"admonition-icon"},Object(r.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(r.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),Object(r.b)("div",{parentName:"div",className:"admonition-content"},Object(r.b)("p",{parentName:"div"},"Here we used the ",Object(r.b)("inlineCode",{parentName:"p"},"-DDEBUG")," flag in the debug command and therefore our ",Object(r.b)("inlineCode",{parentName:"p"},"#ifdef")," statement\nshould check for the existence of ",Object(r.b)("inlineCode",{parentName:"p"},"DEBUG"),". If we had specified a different flag name,\nfor example, ",Object(r.b)("inlineCode",{parentName:"p"},"-DHOLA"),", then the ",Object(r.b)("inlineCode",{parentName:"p"},"#ifdef")," statement should check the existence of ",Object(r.b)("inlineCode",{parentName:"p"},"HOLA"),"."))),Object(r.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(r.b)("div",{parentName:"div",className:"admonition-heading"},Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",{parentName:"h5",className:"admonition-icon"},Object(r.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(r.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),Object(r.b)("div",{parentName:"div",className:"admonition-content"},Object(r.b)("p",{parentName:"div"},"You can avoid writing ",Object(r.b)("inlineCode",{parentName:"p"},"#ifdef")," every time if you use a well done template like ",Object(r.b)("a",{parentName:"p",href:"https://gitlab.com/searleser97/competitive-programming-reference/-/blob/master/Reference/Coding%20Resources/C++/Competitive%20Programming%20Template.cpp"},Object(r.b)("strong",{parentName:"a"},"THIS"))," one,\nwhich allows you to use a ",Object(r.b)("inlineCode",{parentName:"p"},"debug(...)")," function that can print ",Object(r.b)("strong",{parentName:"p"},"anything")," that you pass to it.\nSee ",Object(r.b)("a",{parentName:"p",href:"#print-anything-like-in-python-with-c"},"Print Anything Like In Python With C++"),"."))),Object(r.b)("h3",{id:"debug-command-in-python"},"Debug Command In Python"),Object(r.b)("p",null,"In ",Object(r.b)("inlineCode",{parentName:"p"},"Python")," you can use the ",Object(r.b)("inlineCode",{parentName:"p"},"-O")," flag to print statements just when this flag is used."),Object(r.b)("h5",{id:"cpbooster-configjson-2"},Object(r.b)("inlineCode",{parentName:"h5"},"cpbooster-config.json")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-json"},'{\n  "debugCommand": "python3.9 -O"\n}\n')),Object(r.b)("h5",{id:"programpy"},Object(r.b)("inlineCode",{parentName:"h5"},"program.py")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},'if __debug__:\n  print("This line will be printed just when -O flag is used")\n')),Object(r.b)("h3",{id:"print-anything-like-in-python-with-c"},"Print Anything Like In Python With C++"),Object(r.b)("p",null,"Placing the following code on top of your source file, will enable you\nto use a ",Object(r.b)("inlineCode",{parentName:"p"},"debug(...)")," function, which will work almost like the ",Object(r.b)("inlineCode",{parentName:"p"},"print(...)")," function\nin python and it will just work if we pass the ",Object(r.b)("inlineCode",{parentName:"p"},"-DDEBUG")," flag\nto the compilation command. This function can receive any amount of parameters and\nthey can be of almost any type, to be strict, it supports all primitive types\n(",Object(r.b)("inlineCode",{parentName:"p"},"bool, int, char, ..."),"), all iterable types (",Object(r.b)("inlineCode",{parentName:"p"},"vector, map, set, deque, ..."),") and some\nother types like ",Object(r.b)("inlineCode",{parentName:"p"},"pair")," and ",Object(r.b)("inlineCode",{parentName:"p"},"tuple"),"."),Object(r.b)("h5",{id:"cpbooster-configjson-3"},Object(r.b)("inlineCode",{parentName:"h5"},"cpbooster-config.json")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-json"},'{\n  "debugCommand": "g++ -std=gnu++17 -DDEBUG"\n}\n')),Object(r.b)("h5",{id:"programcpp-1"},Object(r.b)("inlineCode",{parentName:"h5"},"program.cpp")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-cpp"},'#include <bits/stdc++.h>\nusing namespace std;\n\n#ifdef DEBUG\nstring to_string(char c) { return string({c}); }\n// 7\ntemplate<class... Ts>\nostream& operator<<(ostream& o, tuple<Ts...> t) {\n  string s = "(";\n  apply([&](auto&&... r) {\n    ((s += to_string(r) + ", "), ...); }, t);\n  return o << s.substr(0, len(s) - 2) + ")";\n}\n// 3\nostream& operator<<(ostream &o, pair<auto, auto> p) {\n  return o << "(" << p.fi << ", " << p.se << ")";\n}\n// 7\ntemplate<class C, class T = typename C::value_type,\ntypename std::enable_if<!std::is_same<C, std::string>\n::value>::type* = nullptr>\nostream& operator<<(ostream &o, C c) {\n  for (auto e : c) o << setw(7) << right << e;\n  return o << endc << endl << coutc;\n}\n// 7\nvoid debug(const auto &e, const auto &... r) {\n  cout << coutc << e;\n  ((cout << " " << r), ..., (cout << endc << endl));\n}\n#else\n#define debug(...)\n#endif\n')))}p.isMDXComponent=!0}}]);