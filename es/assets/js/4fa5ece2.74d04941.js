"use strict";(self.webpackChunkotter_guides=self.webpackChunkotter_guides||[]).push([[870],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),c=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=c(e.components);return i.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},h=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(n),h=r,g=d["".concat(s,".").concat(h)]||d[h]||p[h]||o;return n?i.createElement(g,a(a({ref:t},u),{},{components:n})):i.createElement(g,a({ref:t},u))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:r,a[1]=l;for(var c=2;c<o;c++)a[c]=n[c];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}h.displayName="MDXCreateElement"},8299:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var i=n(7462),r=(n(7294),n(3905));const o={id:"oop-exercise",title:"Object Oriented Programming Exercise"},a=void 0,l={unversionedId:"interview/interviewee/SWE/oop-exercise",id:"interview/interviewee/SWE/oop-exercise",title:"Object Oriented Programming Exercise",description:"This exercise is quite similar to what you would find in an Algorithmic Exercise with the exception that this one will also focus on your skills to model the problem using object-oriented programming, and in most cases, the problem to solve will be a little bit easier than those presented on an Algorithmic Exercise.",source:"@site/docs/interview/interviewee/SWE/oop-exercise.mdx",sourceDirName:"interview/interviewee/SWE",slug:"/interview/interviewee/SWE/oop-exercise",permalink:"/otter-guides/es/interview/interviewee/SWE/oop-exercise",draft:!1,editUrl:"https://github.com/proyecto-nutria/otter-guides/docs/interview/interviewee/SWE/oop-exercise.mdx",tags:[],version:"current",frontMatter:{id:"oop-exercise",title:"Object Oriented Programming Exercise"},sidebar:"interviewee_swe_exercises",previous:{title:"Algorithmic Exercise",permalink:"/otter-guides/es/interview/interviewee/SWE/algorithmic-exercise"},next:{title:"System Design Exercise",permalink:"/otter-guides/es/interview/interviewee/SWE/system-design-exercise"}},s={},c=[{value:"Example Exercise:",id:"example-exercise",level:3},{value:"Statement",id:"statement",level:4},{value:"Solution without using OO concepts",id:"solution-without-using-oo-concepts",level:4},{value:"Solution using the four pillars of OO: Abstraction, Encapsulation, Inheritance, and Polymorphism",id:"solution-using-the-four-pillars-of-oo-abstraction-encapsulation-inheritance-and-polymorphism",level:4},{value:"General Tips to succeed in the Object Oriented Design Exercise",id:"general-tips-to-succeed-in-the-object-oriented-design-exercise",level:3}],u={toc:c},d="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This exercise is quite similar to what you would find in an ",(0,r.kt)("a",{parentName:"p",href:"algorithmic-exercise"},"Algorithmic Exercise")," with the exception that this one will also focus on your skills to model the problem using object-oriented programming, and in most cases, the problem to solve will be a little bit easier than those presented on an Algorithmic Exercise.\nThe time you will be given for this exercise will be around 30 min to 1 hr."),(0,r.kt)("h3",{id:"example-exercise"},"Example Exercise:"),(0,r.kt)("h4",{id:"statement"},"Statement"),(0,r.kt)("p",null,"Given a binary tree represented with internal nodes and leaf nodes, print the value contained in all the leaf nodes."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A LeafNode is a node that does not have any children and that contains an integer value")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"An InternalNode is a node that can have 1 or 2 children nodes that can either be another InternalNode or a Leaf"))),(0,r.kt)("h4",{id:"solution-without-using-oo-concepts"},"Solution without using OO concepts"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"class Node {\n    Node left;\n    Node right;\n    int value;\n    Node(int value, Node left, Node right) {\n        this.value = value;\n        this.left = left;\n        this.right = right;\n    }\n}\n\npublic class Main {\n    public static void printValuesInBTree(Node node) {           //                 \n        if (node == null) return;                                //        ()\n        if (node.left == null && node.right == null) { // isLeaf //       /  \\\n            System.out.println(node.value);                      //     ()    3  \n        } else {                                                 //    /  \\\n            printValuesInBTree(node.left);                       //   1   ()\n            printValuesInBTree(node.right);                      //      /\n        }                                                        //     2 \n    }                                                            //                \n\n    public static void main(String[] args) {\n        Node root = new Node(0, new Node(0, new Node(1, null, null), new Node(0, new Node(2, null, null), null)), new Node(3, null, null));\n        printValuesInBTree(root);\n    }\n}\n")),(0,r.kt)("h4",{id:"solution-using-the-four-pillars-of-oo-abstraction-encapsulation-inheritance-and-polymorphism"},"Solution using the four pillars of OO: Abstraction, Encapsulation, Inheritance, and Polymorphism"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'abstract class Node {\n    // most languages already have a way to retrieve the type of an object\n    // to be generic we are going to use a method that will tell us the type directly\n    abstract String type();\n}\n\nclass LeafNode extends Node {\n    private int value;\n\n    LeafNode(int value) {\n        this.value = value;\n    }\n    String type() {\n        return "leaf";\n    }\n    int getValue() {\n        return this.value;\n    }\n}\n\nclass InternalNode extends Node {\n    private Node left;\n    private Node right;\n\n    InternalNode(Node left, Node right) {\n        this.left = left;\n        this.right = right;\n    }\n    String type() {\n        return "internal";\n    }\n    Node getLeftNode() {\n        return this.left;\n    }\n    Node getRightNode() {\n        return this.right;\n    }\n}\n\npublic class Main {\n    public static void printValuesInBTree(Node node) {           //\n        if (node == null) return;                                //        ()\n        if (node.type() == "leaf") {                             //       /  \\\n            LeafNode leaf = (LeafNode) node;                     //     ()    3  \n            System.out.println(leaf.getValue());                 //    /  \\\n        } else {                                                 //   1   ()\n            InternalNode internalNode = (InternalNode) node;     //      /\n            printValuesInBTree(internalNode.getLeftNode());      //     2 \n            printValuesInBTree(internalNode.getRightNode());     //                \n        }\n    }\n\n\n    public static void main(String[] args) {\n        Node root = new InternalNode(new InternalNode(new LeafNode(1), new InternalNode(new LeafNode(2), null)), new LeafNode(3));\n        printValuesInBTree(root);\n    }\n}\n')),(0,r.kt)("h3",{id:"general-tips-to-succeed-in-the-object-oriented-design-exercise"},"General Tips to succeed in the Object Oriented Design Exercise"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Follow the flow diagram and tips presented in ",(0,r.kt)("a",{parentName:"li",href:"algorithmic-exercise"},"Algorithmic Exercise")," during the interview"),(0,r.kt)("li",{parentName:"ul"},"Study more ",(0,r.kt)("a",{parentName:"li",href:"https://refactoring.guru/design-patterns"},"Design Patterns"))))}p.isMDXComponent=!0}}]);